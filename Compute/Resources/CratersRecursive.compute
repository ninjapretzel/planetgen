#pragma kernel Heightmap
#pragma kernel Splatmap

#include "../inc/shared.cginc"
#include "../inc/permutation.cginc"
#include "../inc/hashPrimitives.cginc"
#include "../inc/simplex.cginc"
#include "../inc/voroni.cginc"
#include "../inc/uber.cginc"

// Positions of noises to use in Noises buffer
#define HEIGHT_NOISE 0
#define SPLAT_NOISE 1
// Other datas: 
float warpAmt = 2.0;

float craterPoint = .5;
float craterEffect = .4;
float craterMin = .15;
float craterMax = .411;
float craterLip = .62;
float4 craterComp = float4(1, -0.3, 0, 1);

float map(float v, float a, float b, float x, float y) {
	const float p = (v - a) / (b - a);
	return x + (y - x) * clamp(p, 0, 1);
}
float craterCurve(float v) {
	if (v < craterLip) { return (v * v * v) / (craterLip * craterLip * craterLip); }
	return map(v, craterLip, 1.0, 1.0, craterLip);
}
float craters(float3 p) { 
	return Voroni3D(p, craterComp); 
}
float fractalCraters(float3 p) {
	float v = 1;
	float freq = 1.0;
	float amp = 1.0;
	for (int i = 0; i < octaves; i++) {
		float c = craters(p * freq);
		c = 1.0f - (1.0f - c) * amp;
		
		if (c < v) { v = c; }
		freq *= octaveScale;
		amp *= persistence;
	}
	return v;
}
float craterSample(float3 p) {
	return craterCurve(map(fractalCraters(p * scale), craterMin, craterMax, 0.0, 1.0));
}

// Heightmap needs to be POW2 + 1 (ex, 33, 65, 129, 257, etc.
// Heightmap needs to be [1,1,1] to reduce waste.
[numthreads(1,1,1)]
void Heightmap(uint3 id : SV_DispatchThreadID) {
	const float3 position = start + float3(id.x, id.y, id.z) * dist;
	const float crater = craterSample(position);
	NoiseData DATA = Noises[HEIGHT_NOISE]; // DefaultNoiseData();
	
	const float3 warped1 = Warp(DATA, position, warpAmt,
									float3(0, 0, 0),
									float3(5.1, 0, 1.3),
									float3(2.7, 0, 5.2));
	const float3 warped2 = Warp(DATA, warped1, warpAmt, 
									float3(1.7, 0, 9.2),
									float3(8.3, 0, 2.8),
									float3(1.2, 0, 3.4));
	
	UberData UDATA = Ubers[HEIGHT_NOISE];
	// const float noise = abs( uberNoise(UDATA, warped2) );
	const float noise = abs( recursiveUber(UDATA.octaves, 3, 11, warped2) );
	// const float noise = FBM3(DATA, warped2, 0, 1);
	const float effect = clamp(craterEffect, 0, 1);
	const float height = crater * effect + noise * (1.0 - effect);
	
	Heights[(size+1) * id.x + id.z] = height;
}

// Splats can be exact POW2
// These are queried, however, we tile over x/z
// So valid numthreads would be [x,1,z]
[numthreads(8,1,8)]
void Splatmap(uint3 id : SV_DispatchThreadID) {
	const float3 position = start + float3(id.x, id.y, id.z) * dist;
	// Crater sample once
	const float crater = craterSample(position);
	const float pt = clamp(craterPoint, 0.0, 1.0);
	NoiseData DATA = Noises[SPLAT_NOISE]; // DefaultNoiseData();
	
	// Offset position for layer once per kernel
	const int offset = (size) * id.x + id.z;
	const int size2 = size*size;
	for (uint layer = 0; layer < splatLayers; layer++) {
		const int layerPos = layer * size2 + offset;
		
		// Assuming 0 = Cliff layer, skip here.
		// That is set via post-processing after heights are set.
		if (layer == 0) { 
			Splats[layerPos] = 0.0;
		} else if (layer == 1) {
			// Craters are set once.
			Splats[layerPos] = crater < pt ? pow(2, 20) : 0;
		} else {
			const float iSign = ((layer % 2) == 0) ? 1 : -1;
			
			const float3 pr = position + 3.0 * float3(0, iSign * layer, 0);
			
			const float3 warped1 = Warp(DATA, pr, warpAmt,
									float3(0, 0, 0),
									float3(5.1, 0, 1.3),
									float3(2.7, 0, 5.2));
			const float3 warped2 = Warp(DATA, warped1, warpAmt, 
									float3(1.7, 0, 9.2),
									float3(8.3, 0, 2.8),
									float3(1.2, 0, 3.4));
			
			
			
			UberData UDATA = Ubers[SPLAT_NOISE];
			const float unoise = (abs(uberNoise(UDATA, warped2)));
			const float noise = abs(FBM3(DATA, warped2, -1.0, 1.0));
			
			// or non-warped, faster but less interesting.
			// const float noise = FBM3(DATA, pr);
			
			// Normalization is done afterwords.
			Splats[layerPos] = 1.0 / (unoise * unoise + noise * noise);
		}
	}
	
	
	
}
